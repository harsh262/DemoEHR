/**
 * Angular Homepage Controller
 */
var homePageApp = angular.module('homePageApp',['ngCookies','ngAnimate', 'ngSanitize', 'ui.bootstrap','angularjs-dropdown-multiselect','ngMaterial','ngScrollbars','rzModule']).run(['$rootScope','VitalReviewService','$cookies','pateintComplaintService','$timeout', function ($rootScope,VitalReviewService,$cookies,pateintComplaintService,$timeout) {
	$rootScope.patientInfoMethod = VitalReviewService.getPatientByFilter($cookies.get('doctorId'),'mrn',$cookies.get('patientMrn')).then(function(data) {
		$rootScope.patientInfo = data;
	});
	$rootScope.subCategoryValue = "none"; 
	
	$rootScope.multiselectToArray = function(objectArray) {
		var stringArray = [];
		angular.forEach(objectArray, function(value, key) {
			stringArray.push(value.id);
		});
		return stringArray;
	}
	
	$rootScope.resetFormValidation = function() {
		$rootScope.$broadcast('show-errors-reset');
	}
	
}]);

homePageApp.config(function (ScrollBarsProvider) {
    // scrollbar defaults
	ScrollBarsProvider.defaults = {
			autoHideScrollbar: false,
			scrollInertia: 0,
			axis: 'yx',
			advanced: {
				updateOnContentResize: true
			},
			scrollButtons: {
				scrollAmount: 'auto', // scroll amount when button pressed
				enable: true // enable scrolling buttons by default
			}
		};
});

homePageApp.controller("HomePageController",['$scope','$rootScope','VitalReviewService','$window','CommonDateUtils','$cookies','pateintComplaintService','commonCrudService','allergyService','labResultService','postingService','intakeOutputService','POCService','fileUpload','FlagService','$mdSidenav', '$mdUtil','$http','MedicationService',
  function($scope,$rootScope,VitalReviewService,$window,CommonDateUtils,$cookies,pateintComplaintService,commonCrudService,allergyService,labResultService,postingService,intakeOutputService,POCService,fileUpload,FlagService,$mdSidenav, $mdUtil,$http,MedicationService) {
	
	
	$scope.leftHeaderList = [];
	$scope.vitalList = [];
	$scope.vitalObj = [];
	$scope.patientId = $cookies.get("patientId");
	$scope.patientMrn = $cookies.get("patientMrn");
	$scope.doctorId =  $cookies.get("doctorId");
	
	//Cover Sheet Complaint List
	pateintComplaintService.getPatientComplaintList($scope.patientId).then(function(data){
		$scope.getCoverSheetComplaintList = data;
	});
	
	//Cover Page Lab Result List
	labResultService.getLabResult($scope.patientId, $scope.patientMrn).then(function(data){
		$scope.getLabResultList = data;
	});
	
	$scope.getLabResultList = function(){
		labResultService.getLabResult($scope.patientId, $scope.patientMrn).then(function(data){
			$scope.getLabResultList = data;
		});
	}
	
	 $scope.decodeFunction = function(patient){
		 return decodeURIComponent(patient);
	 }
	 console.log($rootScope.patientInfo);
	 //$scope.patientInfo = $rootScope.patientInfo;// = VitalReviewService.getPatientByFilter('mrn',$cookies.get('patientMrn'));//JSON.parse(getCookie("patientInfo"));
	 
	/* 
	* get vital review list 
	*/
		$scope.getVitalList = function(){
			console.log($rootScope.patientInfo);
			VitalReviewService.getVitalReview($rootScope.patientInfo).then(function(data) {
				$scope.vitalReviewList = data;
				generateVitalReviewTable();
			})
		}
	
	/*
	 * get vital review list by date range
	 */
		 $scope.getVitalReviewDateRange = function(vitalDateRange){
        	  	var values = vitalDateRange.split(" - ");
        	  	console.log(values);
        	    var lowerArr =values[0].split("-");
        	    var lowerDate = lowerArr[1] + '-' + lowerArr[0] + '-' + lowerArr[2];
        	    
        	    var upperArr = values[1].split("-");
        	    var upperDate = upperArr[1] + '-' + upperArr[0] + '-' + upperArr[2];
        	    
        	    var upperFinalDate = new Date(upperArr[2], (parseInt(upperArr[1]) - 1), upperArr[0],23,59,59);
        	    
        	    VitalReviewService.getVitalReviewDateRange($scope.patientId, upperFinalDate.getTime(), new Date(lowerDate).getTime()).then(function(data){
        	    	console.log(data);
        	    	//if(data != ""){
        	    		$scope.vitalReviewList = data;
        	    		generateVitalReviewTable();
        	    	//}
        	    });
          }
		
	/*
	 * get  todays vital review list
	 */
	
		 $scope.getTodaysVitalReview = function(){
			 var currentDate = new Date();  
			 var date = currentDate.getDate();
			 var month = currentDate.getMonth();
			 var year = currentDate.getFullYear();
			 var curDate = new Date(year,month,date);
     	    VitalReviewService.getVitalReviewDateRange($scope.patientId, new Date().getTime(), curDate.getTime()).then(function(data){
     	    	console.log(data);
     	    	//if(data != ""){
     	    		$scope.vitalReviewList = data;
     	    		generateVitalReviewTable();
     	    	//}
     	    });
       }
		 
		 
	/*
	 * get Last 7 days vital review list
	 */	

		 $scope.getLastSevenDaysVitalReview = function(){
			 var currentDate = new Date();  
			 var date = currentDate.getDate();
			 var month = currentDate.getMonth();
			 var year = currentDate.getFullYear();
			 var pastSevenDay = new Date(year,month,date);
			 pastSevenDay.setDate(pastSevenDay.getDate()- 7);
     	    VitalReviewService.getVitalReviewDateRange($scope.patientId,  currentDate.getTime() ,pastSevenDay.getTime()).then(function(data){
     	    	console.log(data);
     	    	//if(data != ""){
     	    		$scope.vitalReviewList = data;
     	    		generateVitalReviewTable();
     	    	//}
     	    });
       }
	/* 
	 * Add Row in vital table 
	 */
	$scope.AddData = function(){
		$scope.$broadcast('show-errors-check-validity');
		if($scope.vitalform.$valid){
			$scope.$broadcast('show-errors-reset');
			$scope.vitalList.push($scope.vitalObj);
			 $scope.initVitals();
			console.log($scope.vitalList);
		}
	};
	
	/*
	 * Remove Row in vital table
	 */
	$scope.removeData = function(index) {
		if( $window.confirm('Are you absolutely sure you want to delete?')){
			$scope.vitalList.splice(index, 1);
		}
		
	};
	/*
	 * function to set text boxes.
	 */
	$scope.setVital = function(vitalName, min, max, unit, range, key) {
		$scope.vitalObj.vitalName = vitalName;
		$scope.vitalObj.min = min;
		$scope.vitalObj.max = max;
		$scope.vitalObj.unit = unit;
		$scope.vitalObj.range = range;
		$scope.vitalObj.key = key;
	}
	 $scope.initVitals = function () {
		$scope.vitalObj = angular.copy({
				"vitalName": "",
				"min"      : "",
				"max"      : "",
				"unit"     : "",
				"range"    : "",
				"key"      : ""
			});
		}
	 $scope.initVitals();
	 
	 //save vitals
	 $scope.saveVitlas = function(){
		 $scope.$broadcast('show-errors-check-validity');
		 console.log($scope.vitalform.$valid);
			
				if($scope.vitalList != ''){
					var currDt = new Date();
					var datetext = currDt.toTimeString();
					var vitalObj = {
							"date": currDt.getTime(),
							"timeStamp":CommonDateUtils.getTime(),
							"visitId":$rootScope.patientInfo.visitRecords[0]._id,
							"vitals":$scope.vitalList
					}
					console.log(vitalObj);
					VitalReviewService.saveVitals(vitalObj, $cookies.get('doctorId'), $rootScope.patientInfo._id);
					$scope.vitalList = [];
					$scope.$broadcast('show-errors-reset');
				}
			
	 }
	 
	 $scope.decodeFunction = function(patient){
		 return decodeURIComponent(patient);
	 }
	 
	 function getParamValuesFromUrl(){
			  // This function is anonymous, is executed immediately and 
			  // the return value is assigned to QueryString!
			  var query_string = {};
			  var query = window.location.search.substring(1);
			  console.log(query);
			  var vars = query.split("&");
			  for (var i=0;i<vars.length;i++) {
			    var pair = vars[i].split("=");
			        // If first entry with this name
			    if (typeof query_string[pair[0]] === "undefined") {
			      query_string[pair[0]] = decodeURIComponent(pair[1]);
			        // If second entry with this name
			    } else if (typeof query_string[pair[0]] === "string") {
			      var arr = [ query_string[pair[0]],decodeURIComponent(pair[1]) ];
			      query_string[pair[0]] = arr;
			        // If third or later entry with this name
			    } else {
			      query_string[pair[0]].push(decodeURIComponent(pair[1]));
			    }
			  } 
			  console.log(query_string);
			  //alert(location.href.replace(query, ""));
			  //location.href=location.href.replace(query, "");
			  //$rootScope.patientInfo = 
			 //return JSON.parse($scope.decodeFunction(query_string.pData));
			  return JSON.parse(query_string.pData);
			 // console.log($rootScope.patientInfo);
			 // return query_string.pData;
	 }
	 
	 /*
	  * Generate vital review table
	  */
	 function generateVitalReviewTable(){
		 var tb = angular.element( document.querySelector( '#myTable' ) );
		 tb.empty();
		 var max = 0;
			var index = 0;
			var vital ={
					vitalName: $scope.vitalName,
					value: $scope.value,
					unit: $scope.unit,
					range: $scope.range,
			}
			
			
			angular.forEach($scope.vitalReviewList, function(value, key) {
				 angular.forEach(value.vitals, function(value, key) {
						console.log(value.key);
						
						if ($scope.leftHeaderList.indexOf(value.key) == -1) {
							$scope.leftHeaderList.push(value.key);
						}
					});
					
				});
			
			
			 console.log(index + ': ' + $scope.leftHeaderList);
			 var tableStr = "";
			 var i = 0;
			 	tableStr += "<tr class=\"border-bottom\"><td style = \"background-color: #f5fffd; color: #39ab94; padding-right:15px;padding-top: 5px;padding-bottom: 5px;\">&nbsp;<br><br></td>";
			 	angular.forEach($scope.leftHeaderList, function(topHeading, key) {
			 		tableStr += "<td style=\"padding:4px;\">"+topHeading+"</td>";
			 		
				});
			 	tableStr += "</tr>";
			 	
			 
			 //--------
			 	angular.forEach($scope.vitalReviewList, function(value, key) {
			 		if(key <= 9){
			 		var jsondate = "/Date("+value.date+")/";
			 		var jsDate = new Date(parseInt(jsondate.substr(6)));
			 		var vitalDate = getNewDate(jsDate);
				 tableStr   += "<tr class=\"border-bottom\">"
				 	    	+"<th style = \"background-color: #f5fffd; color: #39ab94; padding-right:15px;padding-top: 5px;padding-bottom: 5px;\"> <div>"+ vitalDate+"</div><div>"+value.timeStamp+"</div></th>" 
				 	    		angular.forEach($scope.leftHeaderList, function(header, key) {
				 	    			angular.forEach(value.vitals, function(value1, key) {
				 				 if(header == value1.key){
				 					 if( $scope.vitalRangeCheck(value1.value, value1.min, value1.max))
				 						 tableStr += "<td style=\"padding:4px;\" class=\"red-font-color\">"+ value1.value +" "+value1.unit+"</td>";
				 					 else
				 						 tableStr += "<td style=\"padding:4px;\">"+ value1.value +" "+value1.unit+"</td>";
				 					 i = 1;
				 					 return;
				 				 }
				 			 });
				 	    	if(i==0)
				 	    		 tableStr += "<td>-</td>";
				 	    	else
				 	    		i=0;
							});
				
				 tableStr += "</tr>";
			 		}
				});
			 
			 	var myEl = angular.element( document.querySelector( '#myTable' ) );
			 	myEl.append(tableStr);
	 }
 
	 $scope.vitalRangeCheck = function(val, minVal,maxVal) {
		    var intVal = parseFloat(val);
		    var intMinVal = parseFloat(minVal);
		    var intMaxVal = parseFloat(maxVal);
		    //alert(intVal+"_"+intMinVal+"_"+intMaxVal);
		    //alert(intVal >= intMinVal || intVal <= intMaxVal);
		    if(intVal >= intMinVal || intVal <= intMaxVal) {
		        return false;
		    } else {
		        return true;
		    }
		}
	 
	 $scope.getLabOrderList = function(){
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Lab Order",$rootScope.subCategoryValue).then(function(data) {
			$scope.getLabOrderList = data;
		});
	 }
	 
	 $scope.getImagingOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Imaging Order",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getImagingOrderList = data;
		});
	}
	 
	 $scope.getIpPharmacyOrderList = function(){
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"IP Pharmacy",$rootScope.subCategoryValue).then(function(data) {
		  $scope.getIpPharmacyOrderList = data;
		 });
	 }
	 
	 $scope.getIvPharmacyOrderList = function() {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"IV Pharmacy",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getIvPharmacyOrderList = data;
			  });
	 }
	
	 $scope.getProcedureSurgicalOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Procedure/Surgical",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getProcedureSurgicalOrderList = data;
			  });
	}
	 
	 $scope.getGeneralOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"General",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getGeneralOrderList = data;
			  });
	}

	 $scope.getConsultOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Consult",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getConsultOrderList = data;
			  });
	}
	 $scope.getVitalOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Vital",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getVitalOrderList = data;
			  });
	}
	 
	 $scope.getNursingOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Nursing",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getNursingOrderList = data;
			  });
	}
	 
	 $scope.getOrderSetsOrderList = function() {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"OrderSets",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getOrderSetsOrderList = data;
			  });
	}
	 
	 $scope.getPatientMovementOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Patient Movement","Admit").then(function(data) {
			  $scope.getPatientMovementOrderList = data;
			  });
	}
	 $scope.getBloodComponentOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"BloodComponent",$rootScope.subCategoryValue).then(function(data) {
			  $scope.getBloodComponentOrderList = data;
			  });
	}
	
	 $scope.getDietOrderList = function () {
		 commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Diet","Diet").then(function(data) {
				$scope.getDietOrderList = data;
				});
	}
	 
	 $scope.getPatientComplaintList = function(){
		 pateintComplaintService.getPatientComplaintList($rootScope.patientInfo._id).then(function(data){
				$scope.getPatientComplaintList = data;
			})
	 }
	 
	 /*$scope.getPatientProblemList = function(){
			pateintComplaintService.getPatientProblemList().then(function(data){
				console.log(data);
				$scope.getPatientProblemList = data;
			});
		}*/
	 
	 $scope.getOpPharmacyOrderList = function(){
			commonCrudService.getOrderByCategory($rootScope.patientInfo._id, "Op Pharmacy","Dosage").then(function(data) {
				$scope.getOpPharmacyOrderList = data;
				});
			}
	 
	 //======= Diet =========//
	 $scope.diet = function(){
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Diet","Diet").then(function(data) {
			$scope.orderItems = angular.copy({
				"billingCode"            :"",
				"isolation"              :"",
				"dietComponent"          :"",
				"dietEffectiveDate"      :"",
				"dietExirationDate"      :"",
				"dietDelivery"           :"",
				"dietPrecaution"         :"",
				"dietSpecialInstructions":""
			});
			$scope.getDietOrderList = data;
			});
		}
	 $scope.tubeFeeding = function(){
		$scope.subCategory = "Tube Feeding";
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Diet","Tube Feeding").then(function(data) {
			$scope.orderItems = angular.copy({
				"billingCode"           :"",
				"tubeFeedingProduct"    :"",
				"strength"              :"",
				"quantity"              :"",
				"amount"                :"",
				"specialInstructions"   :"",
				"cancelFutureTRAYPOrder":""
		})
		$scope.getDietOrderList = data;
		});
	}
	
	$scope.earlyLateTray = function(){
		$scope.subCategory = "Early/Late Tray";
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Diet","Early/Late Tray").then(function(data) {
			$scope.orderItems = angular.copy({
				"billingCode":"",
				"Meal":"",
				"startDate":"",
				"endDate":"",
				"dayOfWeek":{"Monday":false,"Tuesday":false,"Wednesday":false,"Thursday":false,"Friday":false,"Saturday":false,"Sunday":false}
			})	
		$scope.getDietOrderList = data;
		});
	}
	
	$scope.addtionalOrders = function(){
		$scope.subCategory = "Additional Orders";
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Diet","Additional Orders").then(function(data) {
			$scope.orderItems = angular.copy({
				"billingCode":"",
				"additionalOrder":""
			});
		$scope.getDietOrderList = data;
		});
	}
	 
	 //========Patient Movement ===========//
	$scope.admit = function(){
		$scope.subCategory = "Admit";
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Patient Movement","Admit").then(function(data) {
			$scope.orderItems = angular.copy({
				"billingCode"       :"",
				"wardName"          :"",
				"careProvider"      :"",
				"speciality"        :"",
				"startDate"         :"",
				"endDate"           :"",
				"admissionDiagnosis":"",
				"description"       :""
			});
			$scope.getPatientMovementOrderList = data;
		});
	}
	
	$scope.transfer = function(){
		$scope.subCategory = "Transfer";
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Patient Movement","Transfer").then(function(data) {
			$scope.orderItems = angular.copy({
				"billingCode" :"",
				"wardName"    :"",
				"careProvider":"",
				"speciality"  :"",
				"startDate"   :"",
				"endDate"     :"",
				"description" :""
			});
			$scope.getPatientMovementOrderList = data;
		});
	}
	
	$scope.discharge = function(){
		$scope.subCategory = "Discharge";
		commonCrudService.getOrderByCategory($rootScope.patientInfo._id,"Patient Movement","Discharge").then(function(data) {
			$scope.orderItems = angular.copy({
				"billingCode"       :"",
				"Type"              :"",
				"dischargeDiagnosis":"",
				"description"       :""
			});
			$scope.getPatientMovementOrderList = data;
		});
	}
	 
	 
	 
	 //----------------------- allergy module ------------------------//
	//$scope.allergyObj = [];
	 $scope.alleryOriginatorModel = [{id: 1}];
     $scope.alleryOriginatorData = [
         {id: 1, label: "Dr. Smith"},
         {id: 2, label: "Dr Dinesh Raddy"},
         {id: 3, label: "Dr. fb"},
         {id: 4, label: "Dr gbf Raddy"}];
     
   
     $scope.alleryOriginatorSettings = {
         smartButtonMaxItems: 3,
          enableSearch: true,
         smartButtonTextConverter: function(itemText, originalItem) {
             if (itemText === 'Dr. Smith') {
             return 'Dr. Smith!';
             }
     
             return itemText;
         }
     };
	
	 $scope.today = function() {
	   	    $scope.allergyObj.date = new Date();
	   	  };
	   	 
	   	
	   	  $scope.allergyOpen = function() {
	   	    $scope.allergyPopup.opened = true;
	   	  };

	   	  $scope.allergyPopup = {
	   	    opened: false
	   	  };
	 	
	 	
		$scope.setAllergiesVital = function(allergyName){
			$scope.allergyObj.allergyName = allergyName;
		}
		
		$scope.saveAllergy = function(){
			$scope.$broadcast('show-errors-check-validity');
			if($scope.allergyForm.$valid){
				console.log($scope.allergyObj);
				$scope.allergyObj.originationDate = new Date($scope.allergyObj.originationDate).getTime();
				allergyService.saveAllergy($scope.allergyObj,$rootScope.patientInfo._id).then(function(data){
					$scope.$broadcast('show-errors-reset');
					console.log(data);
					$scope.reset();
					getAllergyList();
				});
				$scope.allergyName = "";
			}
		}
	
		$scope.allergyMarkAsError = function(allergyId, state){
			console.log(allergyId);
			var param = {
				  "doctorId" : $cookies.get("doctorId"),
				  "state": state
				}
			allergyService.allergyMarkAsError(allergyId, $scope.patientId, param).then(function(data) {
				getAllergyList();
			});
		}
		
		$scope.getAllergyList = function(){
			$scope.reset();
			allergyService.getAllergyList($rootScope.patientInfo._id).then(function(data) {
				$scope.getAllergyList = data;
				$scope.reset();
				console.log($scope.getAllergyList);
			});
		}
		
		function getAllergyList(){
			$scope.reset();
				allergyService.getAllergyList($rootScope.patientInfo._id).then(function(data) {
					$scope.getAllergyList = data;
				});
			}
		
		$scope.reset = function() {
			//$scope.allergyObj = angular.copy({});
			$scope.allergyObj ={
					 "allergyName"    :"",
					 "date"           :new Date().getTime(),
					 "nature"         :"Allergy",
					 "observedHistory":"Historical",
					 "severity"       :"Moderate",
					 "originators"    :"Self",
					 "comments"       :"",
					 "markNKA"		  : true,
					 "symptoms"       :[],
					 "originationDate": new Date(),
					 "type"           :"Confirmed",
					 "doctorId"       : $cookies.get('doctorId'),
					 "visitId"        :$rootScope.patientInfo.visitRecords[0]._id,
					 "state"          :"active"
					 
			 };
			$scope.allergyObj.type="Confirmed";
		};
		$scope.getDate = function(dateStr){
			return CommonDateUtils.convertJSONStringToDate(dateStr);
		}
		
		//$scope.reset();
		
		  $scope.searchAllergies = function(value){
			  var allergyList = [];
			  return $http.get('http://35.154.76.183:5100/allergySearch/'+value, {
		      }).then(function(res){
		        angular.forEach(res.data, function(item){
		      	  var obj = {allergyId:'',allergyName:'', potentialReaction:'', remarks:'', type:''};
		          obj.allergyId = item._id;
		          obj.allergyName = item.Allergy_Name;
		          obj.potentialReaction = item.Potential_reaction;
		          obj.remarks = item.Remarks
		          obj.type = item.Type
		          allergyList.push(obj);
		        });
		        console.log(allergyList);
		        return allergyList;
		      });
		  }
		
		 $scope.on_allergy_selected = function($item, $model, $label){
			 $scope.allergyObj.allergyName = $item.allergyName;
		 }
		//----------------- Posting -----------------------//
		$scope.postingObj=[];

		$scope.savePosting = function(){
			/*----- file upload start----*/
			var file = $scope.myFile;
             
             console.log('file is ' );
             console.dir(file);
             if(file != '' || file != undefined){
	             var uploadUrl = "/fileUpload";
	             fileUpload.uploadFileToUrl(file, $scope.patientId).then(function(data){
	            	 console.log(data)
	             });
             }
             /*----- file upload end----*/
			$scope.postingObj.patientId = $scope.patientId;
			postingService.savePosting($scope.postingObj).then(function(data){
				getPostingList();
				$scope.resetPosting();
			});
		}
		
		 function getPostingList(){
			postingService.getPostingList($scope.patientId).then(function(data){
				$scope.getPostingList = data;
			});
		}
		 $scope.getPostingList = function(){
			 postingService.getPostingList($scope.patientId).then(function(data){
					$scope.getPostingList = data;
				});
		 }
		 
		$scope.resetPosting = function(){
			$scope.postingObj = {
					"patientId" : "",
					"postingType" : "",
					"sliderValue" : "",
					"date" : new Date().getTime(),
					"title" : "",
					"status" : "Pending",
					"comment" : ""
			}
		}
		$scope.resetPosting();
		$scope.postingObj.postingType = "ER";
		
		$scope.ER = function(){
			$scope.postingObj.postingType = "ER";
		}
		$scope.NOE = function(){
			$scope.postingObj.postingType = "NOE";
		}
		
		
		 $scope.labRangeCheck = function(val, minVal,maxVal) {
			    var intVal = parseFloat(val);
			    var intMinVal = parseFloat(minVal);
			    var intMaxVal = parseFloat(maxVal);
			    //alert(intVal+"_"+intMinVal+"_"+intMaxVal);
			    //alert(intVal >= intMinVal || intVal <= intMaxVal);
			    if(intVal >= intMinVal || intVal <= intMaxVal) {
			        return false;
			    } else {
			        return true;
			    }
			}
		    
		 
		 /*
		  * Intake Output Module 
		  */
		 
		 $scope.saveIntake = function(intakeOutputType){
			 console.log($scope.intakeObj);
			 var parameter ='';
			 if($scope.intakeObj.parameter == 'Other')
				  parameter = $scope.intakeOtherParameter;
			 else
				  parameter = $scope.intakeObj.parameter;
			 
			 $scope.intakeOutputObj = angular.copy({
				 "patientId"        :$scope.patientId,
				 "intakeOutputType" :intakeOutputType,
				 "value"            :$scope.intakeObj.value,
				 "qualifiers"       :$scope.intakeObj.qualifiers,
				 "timeStamp"        : new Date().getTime(),
				 "parameter"        :parameter,
				 "POPFlag"          :true  
			});
			 intakeOutputService.saveIntake($scope.intakeOutputObj).then(function(data){
				getIntakeOutputList();
			 });
			 resetIntake();
		 }
		 
		 $scope.saveOutput = function(intakeOutputType){
			 console.log($scope.outputObj);
			 var parameter ='';
			 if($scope.outputObj.parameter == 'Other')
				  parameter = $scope.outputOtherParameter;
			 else
				  parameter = $scope.outputObj.parameter;
			 $scope.intakeOutputObj = angular.copy({
				 "patientId"        :$scope.patientId,
				 "intakeOutputType" :intakeOutputType,
				 "value"            :$scope.outputObj.value,
				 "qualifiers"       :$scope.outputObj.qualifiers,
				 "timeStamp"        :new Date().getTime(),
				 "parameter"        :parameter,
				 "POPFlag"          :true  
			});
			 intakeOutputService.saveIntake($scope.intakeOutputObj).then(function(data){
				//alert("success"); 
				getIntakeOutputList();
			 });
			 resetOutput();
		 }
		 $scope.getIntakeOutputList = function(){
			 intakeOutputService.getIntakeOutputList($scope.patientId).then(function(data){
				 console.log(data);
				$scope.getIntakeOutputList = data;
			 });
		 }
		 
		 function getIntakeOutputList(){
			 intakeOutputService.getIntakeOutputList($scope.patientId).then(function(data){
				 console.log(data);
				$scope.getIntakeOutputList = data;
			 });
		 }
		 $scope.resetIntakeOutput = function() {
				$scope.intakeOutputObj = angular.copy({
					 "patientId"        :"",
					 "intakeOutputType" :"",
					 "value"            :"",
					 "qualifiers"       :"",
					 "timeStamp"        :"",
					 "parameter"        :"",
					 "POPFlag"          :true  
				});
			};
		
		function resetIntake(){
			$scope.intakeObj.parameter = "",
			$scope.intakeObj.value ="",
			$scope.intakeObj.qualifiers ="",
			$scope.intakeOtherParameter = ""
		}
		function resetOutput(){
			$scope.outputObj.parameter = "",
			$scope.outputObj.value ="",
			$scope.outputObj.qualifiers ="",
			$scope.outputObjOtherParameter = ""
		}
		 
		$scope.getTimeByDate = function(jsonDate){
			return CommonDateUtils.getTimeByDate(jsonDate);
		}
		
		/*---------------------- POC -------------------*/
		
		function getPOCList(){
			POCService.getPOCList($scope.patientId).then(function(data){
				$scope.getPOCList = data;
			});
		}
		$scope.getPOCMasterList = function(){
			getPOCList();
			$scope.gender = $rootScope.patientInfo.gender;
			POCService.getPOCMasterList().then(function(data){
				$scope.getPOCMasterList = data;
			});
		}
		
		
		
		$scope.getPOCById = function(pocId){
			$scope.POCTestList = getTests(pocId);
		}
		
		$scope.savePOC = function(){
			var pocListObj = []
			var min;
			var max;
			list = $scope.POCTestList;
			for(var i = 0; i<list.length ; i++){
				if(list[i].default_Value !=''){
					if(list[i].range.length == 2){
						for(var j = 0; j < list[i].range.length; j++){
							if($scope.gender == "Male" && list[i].range[j].key == "men"){
								min=list[i].range[j].min;
								max=list[i].range[j].max;
							}else if($scope.gender == "Female" && list[i].range[j].key == "women"){
								min=list[i].range[j].min;
								max=list[i].range[j].max;
							}
						}
						
					}else{
						min=list[i].range[0].min;
						max=list[i].range[0].max;
					}
					
					var tests = {
						    "test": list[i].parameter_name,
						    "unit": list[i].unit,
						    "minRange" : min,
						    "maxRange" : max,
						    "testValue": list[i].default_Value
					}
					pocListObj.push(tests);
					
				}
				//$scope.POCTestList = angular.copy({});
			}
			console.log(pocListObj);
			var resultantPOC = {
					"POCTestName": $scope.pocTestName,
					"POCdate":new Date().getTime(),
					"listItems":pocListObj
			}
			console.log(resultantPOC);
			POCService.savePOC(resultantPOC, $scope.patientId).then(function(data){
				getPOCList();
			});
		}
		
		$scope.pocMarkError = function(POCId){
			POCService.pocMarkError($scope.patientId, POCId).then(function(data){
				getPOCList();
			});
		}
		
		function getTests(pocId){
			list = $scope.getPOCMasterList;
			console.log(list);
			 for (var d = 0, len = list.length; d < len; d += 1) {
			        if (list[d]._id === pocId) {
			        	$scope.pocTestName = list[d].test_name;
			            return list[d].Parameter;
			        }
			    }
		}
		
		/*------------------- File Upload ----------------*/
		 $scope.uploadFile = function(){
            /* var file = $scope.myFile;
             
             console.log('file is ' );
             console.dir(file);
             
             var uploadUrl = "/fileUpload";
             fileUpload.uploadFileToUrl(file, $scope.patientId).then(function(data){
            	 console.log(data)
             });*/
          };
        
          
		/*---------------------- Flag -------------------*/
         $scope.saveFlag = function(flagList, flagvalue){
        	 if(flagList != '' && flagvalue != ''){
	        	 var flagListItems = [];
	        	 var obj = {flagName : "", flagValue : ""};
	        	  console.log(flagList);
	        	 for(var i=0; i< flagList.length; i++){
	        		 var flag = flagList[i];
	        		 obj.flagName = flagList[i].id;
	        		 obj.flagValue = flagvalue;
	        		 flagListItems.push(obj);
	        	 }
	        	 var flagObj = {
	        			 			"doctorId" : $scope.doctorId,
	        			 			"visitId"  : $rootScope.patientInfo.visitRecords[0]._id,
	        			 			"flagList" : flagListItems
	        			 		}
	        	 FlagService.saveFlag(flagObj, $scope.patientId).then(function(data){
	        		console.log(data); 
	        		getFlagList();
	        	 });
        	 }
        	 resetFlag();
         } 
         
         function getFlagList(){
        	 FlagService.getFlagList($scope.patientId).then(function(data){
        		$scope.getFlagList = data; 
        	 });
         }
         
         $scope.getFlagList = function(){
        	 resetFlag();
        	 FlagService.getFlagList($scope.patientId).then(function(data){
         		$scope.getFlagList = data; 
         	 });
         }
         
         $scope.flagEnteredInError = function(flagId){
        	 var param = {
        			  		"doctorId" : $scope.doctorId
        	 			}
        	 FlagService.flagEnteredInError(flagId, $scope.patientId,param).then(function(data){
        		 console.log(data);
        		 getFlagList();
        	 });
         }
         function resetFlag(){
        	 $scope.flagDropModel = "";
        	 $scope.flagValue = "";
         }
		
//------------------ Medication------------------//
         $scope.getMedicationList = function(){
        	 MedicationService.getMedicationList($scope.patientId).then(function(data){
        		 $scope.getMedicationList = data;
        	 });
         }
         
         
         
         
         
		  $scope.dynamicPopover = {
				
				    content: 'Hello, World! faryfyu fdtugi fi guu gj fcjgg vuh vu gvkh guhi Hello, World! faryfyu fdtugi fi guu gj fcjgg vuh vu gvkh guhi Hello, World! faryfyu fdtugi fi guu gj fcjgg vuh vu gvkh guhi Hello, World! faryfyu fdtugi fi guu gj fcjgg vuh vu gvkh guhi',
				   
				    
				  };
		  $scope.scrollbarConfig = {
					theme: 'dark',
					scrollInertia: 500
				}
		
}]);

homePageApp.directive('popoverClose', function($timeout){
	  return{
	    scope: {
	      excludeClass: '@'
	    },
	    link: function(scope, element, attrs) {
	      var trigger = document.getElementsByClassName('trigger');
	      
	      function closeTrigger(i) {
	        $timeout(function(){ 
	          angular.element(trigger[0]).triggerHandler('click').removeClass('trigger'); 
	        });
	      }
	      
	      element.on('click', function(event){
	        var etarget = angular.element(event.target);
	        var tlength = trigger.length;
	        if(!etarget.hasClass('trigger') && !etarget.hasClass(scope.excludeClass)) {
	          for(var i=0; i<tlength; i++) {
	            closeTrigger(i)
	          }
	        }
	      });
	    }
	  };
	});
homePageApp.directive('popoverElem', function(){
	  return{
	    link: function(scope, element, attrs) {
	      element.on('click', function(){
	        element.addClass('trigger');
	      });
	    }
	  };
	});

